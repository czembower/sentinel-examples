import "http"
import "json"
import "strings"

vault_addr = "${vault_addr}"
role_id = "${role_id}"
secret_id = "${secret_id}"
max_secret_ids = ${max_secret_ids}
this_namespace = strings.trim_suffix(namespace.path, "/")

vault_login = func() {
  approle_mount_path = strings.split(request.path, "/role/")[0]
  req_path = "/v1/" + approle_mount_path + "/login"
  req = http.request(vault_addr + req_path).
    with_header("X-Vault-Namespace", this_namespace).
    with_body(json.marshal({"role_id": role_id, "secret_id": secret_id}))

  resp = http.accept_status_codes([200, 429]).without_certificate_verification().post(req)
  if resp.status_code is 429 {
    print(json.unmarshal(resp.body))
    return false
  }
  body = json.unmarshal(resp.body)
  return body["auth"]["client_token"]
}

verify_secret_id_count = func() {
  token = vault_login()
  if token is false {
    return false
  }
  
  req_path = "/v1/" + request.path + "?list=true"
  req = http.request(vault_addr + req_path).
    with_header("X-Vault-Token", token).
    with_header("X-Vault-Namespace", this_namespace)
  resp = http.accept_status_codes([200, 404, 429]).without_certificate_verification().get(req)

  if resp.status_code is 404 {
    return true
  }

  if resp.status_code is 429 {
    print(json.unmarshal(resp.body))
    return false
  }

  body = json.unmarshal(resp.body)
  secret_id_list = body["data"]["keys"]
  num_secret_ids = length(secret_id_list)
  
  if num_secret_ids > max_secret_ids {
    print("Exceeded threshold for total secret IDs associated with this role.")
    return false
  }

  return true
}

precond = rule {
  request.operation is "update" and strings.has_suffix(request.path, "secret-id")
}

main = rule when precond {
  verify_secret_id_count()
}